{"ast":null,"code":"import decode from 'jwt-decode';\n\nclass AuthService {\n  // retrieve data saved in token\n  getProfile() {\n    return decode(this.getToken());\n  } // check if the user is still logged in\n\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken(); // use type coersion to check if token is NOT undefined and the token is NOT expired\n\n    return !!token && !this.isTokenExpired(token);\n  } // check if the token has expired\n\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else {\n        return false;\n      }\n    } catch (err) {\n      return false;\n    }\n  } // retrieve token from localStorage\n\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  } // set token to localStorage and reload page to homepage\n\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  } // clear token from localStorage and force logout with reload\n\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token'); // this will reload the page and reset the state of the application\n\n    window.location.assign('/');\n  }\n\n}\n\nexport default new AuthService();","map":{"version":3,"sources":["/Users/christyrone/Desktop/projects/deep-thoughts/client/src/utils/auth.js"],"names":["decode","AuthService","getProfile","getToken","loggedIn","token","isTokenExpired","decoded","exp","Date","now","err","localStorage","getItem","login","idToken","setItem","window","location","assign","logout","removeItem"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,YAAnB;;AAEA,MAAMC,WAAN,CAAkB;AACd;AACAC,EAAAA,UAAU,GAAG;AACX,WAAOF,MAAM,CAAC,KAAKG,QAAL,EAAD,CAAb;AACD,GAJa,CAMd;;;AACAC,EAAAA,QAAQ,GAAG;AACT;AACA,UAAMC,KAAK,GAAG,KAAKF,QAAL,EAAd,CAFS,CAGT;;AACA,WAAO,CAAC,CAACE,KAAF,IAAW,CAAC,KAAKC,cAAL,CAAoBD,KAApB,CAAnB;AACD,GAZa,CAcd;;;AACAC,EAAAA,cAAc,CAACD,KAAD,EAAQ;AACpB,QAAI;AACF,YAAME,OAAO,GAAGP,MAAM,CAACK,KAAD,CAAtB;;AACA,UAAIE,OAAO,CAACC,GAAR,GAAcC,IAAI,CAACC,GAAL,KAAa,IAA/B,EAAqC;AACnC,eAAO,IAAP;AACD,OAFD,MAEO;AACL,eAAO,KAAP;AACD;AACF,KAPD,CAOE,OAAOC,GAAP,EAAY;AACZ,aAAO,KAAP;AACD;AACF,GA1Ba,CA4Bd;;;AACAR,EAAAA,QAAQ,GAAG;AACT;AACA,WAAOS,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAP;AACD,GAhCa,CAkCd;;;AACAC,EAAAA,KAAK,CAACC,OAAD,EAAU;AACb;AACAH,IAAAA,YAAY,CAACI,OAAb,CAAqB,UAArB,EAAiCD,OAAjC;AAEAE,IAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,GAAvB;AACD,GAxCa,CA0Cd;;;AACAC,EAAAA,MAAM,GAAG;AACP;AACAR,IAAAA,YAAY,CAACS,UAAb,CAAwB,UAAxB,EAFO,CAGP;;AACAJ,IAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,GAAvB;AACD;;AAhDa;;AAoDlB,eAAe,IAAIlB,WAAJ,EAAf","sourcesContent":["import decode from 'jwt-decode';\n\nclass AuthService {\n    // retrieve data saved in token\n    getProfile() {\n      return decode(this.getToken());\n    }\n  \n    // check if the user is still logged in\n    loggedIn() {\n      // Checks if there is a saved token and it's still valid\n      const token = this.getToken();\n      // use type coersion to check if token is NOT undefined and the token is NOT expired\n      return !!token && !this.isTokenExpired(token);\n    }\n  \n    // check if the token has expired\n    isTokenExpired(token) {\n      try {\n        const decoded = decode(token);\n        if (decoded.exp < Date.now() / 1000) {\n          return true;\n        } else {\n          return false;\n        }\n      } catch (err) {\n        return false;\n      }\n    }\n  \n    // retrieve token from localStorage\n    getToken() {\n      // Retrieves the user token from localStorage\n      return localStorage.getItem('id_token');\n    }\n  \n    // set token to localStorage and reload page to homepage\n    login(idToken) {\n      // Saves user token to localStorage\n      localStorage.setItem('id_token', idToken);\n  \n      window.location.assign('/');\n    }\n  \n    // clear token from localStorage and force logout with reload\n    logout() {\n      // Clear user token and profile data from localStorage\n      localStorage.removeItem('id_token');\n      // this will reload the page and reset the state of the application\n      window.location.assign('/');\n    }\n  }\n  \n\nexport default new AuthService();"]},"metadata":{},"sourceType":"module"}