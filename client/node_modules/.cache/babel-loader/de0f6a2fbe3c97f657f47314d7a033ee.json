{"ast":null,"code":"var _jsxFileName = \"/Users/christyrone/Desktop/projects/deep-thoughts/client/src/components/ThoughtForm/index.js\";\nimport React, { useState } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport { ADD_THOUGHT } from '../../utils/mutations';\nimport { QUERY_THOUGHTS, QUERY_ME } from '../../utils/queries';\n\nconst ThoughtForm = () => {\n  const [thoughtText, setText] = useState('');\n  const [characterCount, setCharacterCount] = useState(0);\n  const [addThought, {\n    error\n  }] = useMutation(ADD_THOUGHT, {\n    update(cache, {\n      data: {\n        addThought\n      }\n    }) {\n      try {\n        // could potentially not exist yet, so wrap in a try...catch\n        const {\n          thoughts\n        } = cache.readQuery({\n          query: QUERY_THOUGHTS\n        });\n        cache.writeQuery({\n          query: QUERY_THOUGHTS,\n          data: {\n            thoughts: [addThought, ...thoughts]\n          }\n        });\n      } catch (e) {\n        console.error(e);\n      } // update me object's cache, appending new thought to the end of the array\n\n\n      const {\n        me\n      } = cache.readQuery({\n        query: QUERY_ME\n      });\n      cache.writeQuery({\n        query: QUERY_ME,\n        data: {\n          me: { ...me,\n            thoughts: [...me.thoughts, addThought]\n          }\n        }\n      });\n    }\n\n  });\n\n  const handleChange = event => {\n    if (event.target.value.length <= 280) {\n      setText(event.target.value);\n      setCharacterCount(event.target.value.length);\n    }\n  };\n\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n\n    try {\n      // add thought to database\n      await addThought({\n        variables: {\n          thoughtText\n        }\n      }); // clear form value\n\n      setText('');\n      setCharacterCount(0);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: `m-0 ${characterCount === 280 || error ? 'text-error' : ''}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 12\n    }\n  }, \"Character Count: \", characterCount, \"/280\", error && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"ml-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, \"Something went wrong...\")), /*#__PURE__*/React.createElement(\"form\", {\n    className: \"flex-row justify-center justify-space-between-md align-stretch\",\n    onSubmit: handleFormSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"textarea\", {\n    placeholder: \"Here's a new thought...\",\n    value: thoughtText,\n    className: \"form-input col-12 col-md-9\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn col-12 col-md-3\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }\n  }, \"Submit\")));\n};\n\nexport default ThoughtForm;","map":{"version":3,"sources":["/Users/christyrone/Desktop/projects/deep-thoughts/client/src/components/ThoughtForm/index.js"],"names":["React","useState","useMutation","ADD_THOUGHT","QUERY_THOUGHTS","QUERY_ME","ThoughtForm","thoughtText","setText","characterCount","setCharacterCount","addThought","error","update","cache","data","thoughts","readQuery","query","writeQuery","e","console","me","handleChange","event","target","value","length","handleFormSubmit","preventDefault","variables"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport { ADD_THOUGHT } from '../../utils/mutations';\nimport { QUERY_THOUGHTS, QUERY_ME } from '../../utils/queries';\n\nconst ThoughtForm = () => {\n    const [thoughtText, setText] = useState('');\n    const [characterCount, setCharacterCount] = useState(0);\n    const [addThought, { error }] = useMutation(ADD_THOUGHT, {\n        update(cache, { data: { addThought } }) {\n          try {\n            // could potentially not exist yet, so wrap in a try...catch\n            const { thoughts } = cache.readQuery({ query: QUERY_THOUGHTS });\n            cache.writeQuery({\n              query: QUERY_THOUGHTS,\n              data: { thoughts: [addThought, ...thoughts] }\n            });\n          } catch (e) {\n            console.error(e);\n          }\n      \n          // update me object's cache, appending new thought to the end of the array\n          const { me } = cache.readQuery({ query: QUERY_ME });\n          cache.writeQuery({\n            query: QUERY_ME,\n            data: { me: { ...me, thoughts: [...me.thoughts, addThought] } }\n          });\n        }\n      });\n      \n      \n\n    const handleChange = event => {\n        if (event.target.value.length <= 280) {\n            setText(event.target.value);\n            setCharacterCount(event.target.value.length);\n        }\n    };\n    const handleFormSubmit = async event => {\n        event.preventDefault();\n      \n        try {\n          // add thought to database\n          await addThought({\n            variables: { thoughtText }\n          });\n      \n          // clear form value\n          setText('');\n          setCharacterCount(0);\n        } catch (e) {\n          console.error(e);\n        }\n      };\n      \n\n      \n    return (\n        <div>\n           <p className={`m-0 ${characterCount === 280 || error ? 'text-error' : ''}`}>\n  Character Count: {characterCount}/280\n  {error && <span className=\"ml-2\">Something went wrong...</span>}\n</p>\n            <form\n                className=\"flex-row justify-center justify-space-between-md align-stretch\"\n                onSubmit={handleFormSubmit}\n            >\n                <textarea\n                    placeholder=\"Here's a new thought...\"\n                    value={thoughtText}\n                    className=\"form-input col-12 col-md-9\"\n                    onChange={handleChange}\n                ></textarea>\n\n                <button className=\"btn col-12 col-md-3\" type=\"submit\">\n                    Submit\n        </button>\n            </form>\n        </div>\n    );\n};\n\nexport default ThoughtForm;"]},"metadata":{},"sourceType":"module"}